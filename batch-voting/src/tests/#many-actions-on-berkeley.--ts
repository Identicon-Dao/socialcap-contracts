import { Mina, PrivateKey, PublicKey, Field, AccountUpdate } from 'o1js';
import { addElectorsToNullifier } from '../helpers/nullifiers.js';
import { buildVotesBatch, mergeAllBatches } from '../helpers/voting-batches.js';
import { VotingBatchesContract } from '../VotingBatchesContract.js';
import { UID } from "../lib/uid.js";


const Berkeley = Mina.Network({
  mina: 'https://proxy.berkeley.minaexplorer.com/graphql',
  archive: 'https://archive-node-api.p42.xyz/',
});
Mina.setActiveInstance(Berkeley);




///////////////////////////////////////////////////////////////////////////////
/// Set up local instance
///////////////////////////////////////////////////////////////////////////////

// set instance
const Local = Mina.LocalBlockchain({ proofsEnabled: true });
Mina.setActiveInstance(Local);


///////////////////////////////////////////////////////////////////////////////
/// Get some accounts for testing
///////////////////////////////////////////////////////////////////////////////

// get some accounts
function getLocalAccount(j: number): { puk: PublicKey, prk: PrivateKey } {
  let acc = Local.testAccounts[j];
  return {
    puk: acc.publicKey, 
    prk: acc.privateKey
  };
}

let deployer = getLocalAccount(0);
let sender = getLocalAccount(1);
console.log("deployer Addr=", deployer.puk.toBase58());
console.log("sender Addr=", sender.puk.toBase58());


///////////////////////////////////////////////////////////////////////////////
///  Deploy locally
///////////////////////////////////////////////////////////////////////////////

const DEPLOY_TX_FEE = 300_000_000;

// first compile it
await VotingBatchesContract.compile();

// we need to generate a new key pair for each deploy !
const zkAppKey = PrivateKey.random();
const zkAppAddr = zkAppKey.toPublicKey();
console.log(`zkApp instance Addr=${zkAppAddr.toBase58()}`);
console.log(`zkApp instance Key=${zkAppKey.toBase58()}`);

let zkApp = new VotingBatchesContract(zkAppAddr);
console.log(`zkApp instance created for Contract`);
// console.log(`zkApp verificationKey=${verificationKey}`);

// deploy it 
let txn = await Mina.transaction(
  { sender: deployer.puk, fee: DEPLOY_TX_FEE }, 
  () => {
    // IMPORTANT: the deployer account must already be funded 
    // or this will fail miserably ughhh
    AccountUpdate.fundNewAccount(deployer.puk);
    // NOTE: this calls `init()` if this is the first deploy
    zkApp.deploy();
  }
);
await txn.prove();

// this tx needs .sign(), because `deploy()` adds an account update 
// that requires signature authorization
await txn.sign([deployer.prk, zkAppKey]).send();
console.log("zkApp instance deployed !")


///////////////////////////////////////////////////////////////////////////////
/// Run setup(planUid, communityUid) on deployed zkApp
///////////////////////////////////////////////////////////////////////////////

let planUid = UID.toField(UID.uuid4());
let communityUid = UID.toField(UID.uuid4());

let sentTx;
try {
  // call setup() and send transaction
  console.log('build transaction and create proof...');
  let tx = await Mina.transaction(
    { sender: deployer.puk, fee: DEPLOY_TX_FEE }, 
    () => {
      zkApp.setup(planUid, communityUid);
    }
  );
  await tx.prove();
  console.log('send transaction...');
  sentTx = await tx.sign([deployer.prk]).send();
} catch (err) {
  console.log(err);
}
// Txn Hash retrieving is not supported for LocalBlockchain.
// if (sentTx?.hash() !== undefined) {
//   console.log(`${sentTx.hash()}`);
// }


///////////////////////////////////////////////////////////////////////////////
/// Create elector accounts and a Nullifier 
///////////////////////////////////////////////////////////////////////////////

// we need to add some electors with their accountIds
let electors: { puk: PublicKey, prk: PrivateKey }[] = [];
electors[0] = getLocalAccount(3);
electors[1] = getLocalAccount(4);
electors[2] = getLocalAccount(5);
electors[3] = getLocalAccount(6);
electors[4] = getLocalAccount(7);

let nullifier = addElectorsToNullifier(
  planUid, 
  [ electors[0].puk, electors[1].puk, electors[2].puk, electors[3].puk ]
);

let null00 = getNullifierProxy(nullifier, electors[0].puk, planUid);


///////////////////////////////////////////////////////////////////////////////
/// Now prepare batch of vote (with its MerkleMap) 
///////////////////////////////////////////////////////////////////////////////

// simulate a set of votes 
let votes1 = [
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: -1 },
  { claimUid: UID.toField(UID.uuid4()), value: -1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: 0 },
]

let votesBatch1 = buildVotesBatch(
  electors[0].puk,
  planUid, 
  communityUid,
  votes1
)

// simulate another set of votes 
let votes2 = [
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: 0 },
  { claimUid: UID.toField(UID.uuid4()), value: -1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: -1 },
  { claimUid: UID.toField(UID.uuid4()), value: -1 },
  { claimUid: UID.toField(UID.uuid4()), value: +1 },
  { claimUid: UID.toField(UID.uuid4()), value: 0 },
]

let votesBatch2 = buildVotesBatch(
  electors[1].puk,
  planUid, 
  communityUid,
  votes2
)


///////////////////////////////////////////////////////////////////////////////
/// Now we can submit one batch to the Contract 
///////////////////////////////////////////////////////////////////////////////

// IMPORTANT: we MUST run as one of the electors, otherwise it will CORRCTLY fail
// because the deployer account is not in the Electors Nullifier
let theElector = electors[0];

try {
  // call setup() and send transaction
  console.log('build transaction and create proof...');
  let tx = await Mina.transaction(
    { sender: theElector.puk, fee: DEPLOY_TX_FEE }, 
    () => {
      zkApp.receiveVotesBatch(
        votesBatch1,
        null00
      );
    }
  );
  await tx.prove();
  console.log('send transaction...');
  sentTx = await tx.sign([theElector.prk]).send();
} catch (err) {
  console.log(err);
}

try {
  // call setup() and send transaction
  console.log('build transaction and create proof...');
  let tx = await Mina.transaction(
    { sender: theElector.puk, fee: DEPLOY_TX_FEE }, 
    () => {
      zkApp.receiveVotesBatch(
        votesBatch2,
        null00
      );
    }
  );
  await tx.prove();
  console.log('send transaction...');
  sentTx = await tx.sign([theElector.prk]).send();
} catch (err) {
  console.log(err);
}


///////////////////////////////////////////////////////////////////////////////
/// Finally we rollup all the available batches 
///////////////////////////////////////////////////////////////////////////////

let { index, value, root, witness } = mergeAllBatches([
  votesBatch1,
  votesBatch2
]) ;

try {
  // call setup() and send transaction
  console.log('build transaction and create proof...');
  let tx = await Mina.transaction(
    { sender: deployer.puk, fee: DEPLOY_TX_FEE }, 
    () => {
      zkApp.commitAllBatches(
        index, value,
        root, witness
      );
    }
  );
  await tx.prove();
  console.log('send transaction...');
  sentTx = await tx.sign([deployer.prk]).send();
} catch (err) {
  console.log(err);
}
